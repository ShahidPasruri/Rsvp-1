{"version":3,"sources":["Components/Counter/Counter.js","Components/GuestName/GuestName.js","Components/Guest/Guest.js","Components/PendingGuest/PendingGuest.js","Components/GuestList/GuestList.js","Components/App/App.js","index.js"],"names":["Counter","props","totalInvited","totalGuests","confirmed","Confirmed","UnConfirmed","unConfirmed","className","GuestName","isEdit","type","value","children","onChange","handleNameEdits","Guest","e","setName","target","name","checked","isConfirmed","handleChange","onClick","toggleEditAt","removeGuest","PendingGuest","GuestList","guests","filter","guest","isFilterd","map","index","id","toggleConfirmationAt","text","setNameAt","App","lastId","newId","state","pendingGuest","setState","toggleFilter","handleAddGuest","event","preventDefault","handleRemoveGuest","getTotalInvited","length","getAttendingGuests","reduce","total","getUnConfirmedGuests","onSubmit","this","placeholder","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.832084e9.chunk.js","sourcesContent":["import React from 'react';\r\nconst Counter = (props) => {\r\n    const totalInvited=props.totalGuests();\r\n    const confirmed=props.Confirmed()\r\n    const UnConfirmed=props.unConfirmed()\r\n    return ( \r\n        <>\r\n        <table className=\"counter\">\r\n          <tbody>\r\n            <tr>\r\n              <td>Attending:</td>\r\n              <td>{confirmed}</td>\r\n            </tr>\r\n            <tr>\r\n              <td>Unconfirmed:</td>\r\n              <td>{UnConfirmed}</td>\r\n            </tr>\r\n            <tr>\r\n              <td>Total:</td>\r\n              <td>{totalInvited}</td>\r\n            </tr>\r\n          </tbody>\r\n        </table>\r\n        </>\r\n     );\r\n}\r\n \r\nexport default Counter;","import React from 'react';\r\nconst GuestName = (props) => {\r\n    if(props.isEdit){\r\n        return(\r\n            <input type='text' value={props.children} onChange={props.handleNameEdits}></input>\r\n        )\r\n    }\r\n        return(\r\n            <span>{props.children}</span>\r\n        )\r\n}\r\n \r\nexport default GuestName;","import React from 'react';\r\nimport PropTypes from 'prop-types'\r\nimport GuestName from '../GuestName/GuestName';\r\nconst Guest = (props) => {\r\n    return ( \r\n        <>\r\n           <li>\r\n            <GuestName isEdit={props.isEdit} handleNameEdits={e=>props.setName(e.target.value)}>{props.name}</GuestName>\r\n            <label>\r\n              <input type=\"checkbox\" checked={props.isConfirmed} onChange={props.handleChange}/> Confirmed\r\n            </label>\r\n            <button onClick={props.toggleEditAt}>{props.isEdit ? 'Done' : 'Edit'}</button>\r\n            <button onClick={props.removeGuest}>remove</button>\r\n          </li> \r\n        </>\r\n     );\r\n    }\r\n\r\n    Guest.propTypes={\r\n        name:PropTypes.string.isRequired,\r\n        isConfirmed: PropTypes.bool.isRequired,\r\n        isEdit:PropTypes.bool.isRequired,\r\n        handleChange:PropTypes.func.isRequired,\r\n        toggleEditAt:PropTypes.func.isRequired\r\n    }\r\nexport default Guest;","import React from 'react';\r\nconst PendingGuest = (props) => {\r\n    if(props.name){\r\n        return ( \r\n            <>\r\n                <li className='pending'>\r\n                <span >{props.name}</span>\r\n              </li> \r\n            </>\r\n           \r\n         );\r\n    }\r\n    return null;\r\n    \r\n}\r\n \r\nexport default PendingGuest;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Guest from '../Guest/Guest';\r\nimport PendingGuest from '../PendingGuest/PendingGuest';\r\nconst GuestList = (props) => {\r\n    return ( \r\n        <>\r\n        <ul>\r\n        <PendingGuest name={props.PendingGuest}/>\r\n        { props.guests.filter(guest=>!props.isFilterd || guest.isConfirmed ).map((guest,index)=><Guest name={guest.name} id={props.id} isConfirmed={guest.isConfirmed} isEdit={guest.isEdit} key={index} handleChange={()=>props.toggleConfirmationAt(guest.id)} toggleEditAt={()=>props.toggleEditAt(guest.id)} removeGuest={()=>{props.removeGuest(guest.id)}} setName={text=>props.setNameAt(text,guest.id)} index={index}/>)}\r\n        </ul>\r\n        </>\r\n     );\r\n\r\n  \r\n}\r\nGuestList.propTypes={\r\n  guests: PropTypes.array.isRequired,\r\n  toggleConfirmationAt: PropTypes.func.isRequired,\r\n  toggleEditAt: PropTypes.func.isRequired,\r\n  PendingGuest:PropTypes.string.isRequired\r\n\r\n}\r\n \r\nexport default GuestList;","import React, {Component} from 'react';\r\nimport Counter from '../Counter/Counter';\r\nimport GuestList from '../GuestList/GuestList';\r\nimport './App.css'\r\nclass App extends Component {\r\n  lastId=0;\r\n  newId=()=>{\r\n    let id=this.lastId;\r\n    this.lastId+=1\r\n    return id;\r\n  }\r\n\r\n  state={\r\n    isFilterd: false,\r\n    pendingGuest: '',\r\n    guests:[\r\n      \r\n    ]\r\n  }\r\n  \r\n  //This Method to update isCOnfirmed is can also work..But we Use treehouselogic\r\n  // toggleConfirmationAt=(indexToChange)=>{\r\n  //   const guestArr=this.state.guests.slice();\r\n  //   this.state.guests[indexToChange].isConfirmed= !this.state.guests[indexToChange].isConfirmed;\r\n  //   // const toggleConfirm = guestArr[index].isConfirmed\r\n  //   this.setState({isConfirmed: guestArr[indexToChange].isConfirmed})\r\n  // }\r\n\r\n  \r\n  toggleConfirmationAt=(id)=>{\r\n    this.setState({\r\n      guests: this.state.guests.map((guest)=>{\r\n        if(id ===  guest.id){\r\n          return{\r\n            ...guest,//Copying object properties into new object literal\r\n            isConfirmed: !guest.isConfirmed\r\n          }\r\n        }\r\n        return guest;\r\n      })\r\n    })\r\n  }\r\n\r\n  toggleEditAt=(id)=>{\r\n    this.setState({\r\n      guests: this.state.guests.map((guest)=>{\r\n      if(id === guest.id){\r\n        {/* INDEXTOEDIT wo wala index hy jo dusri side py chal rha jhan function call hona hy*/}\r\n        {/* mtlb k ye wala INDEX or wo jo dursa INDEX jahan function call hva hy match kr jayen to ye return ho*/}\r\n          return{\r\n            ...guest,//Copying object properties into new object literal\r\n            isEdit: !guest.isEdit\r\n          }\r\n        }\r\n        return guest;\r\n      })\r\n    })\r\n  }\r\n\r\n  setNameAt=(name,id)=>{\r\n    this.setState({\r\n      guests:this.state.guests.map((guest)=>{\r\n        if(id===guest.id){\r\n          return{\r\n            ...guest,\r\n            name:name\r\n          }\r\n        }\r\n        return guest\r\n      })\r\n    })\r\n  }\r\n\r\n  toggleFilter=()=>{\r\n    this.setState({isFilterd: !this.state.isFilterd})\r\n  }\r\n  \r\n  handleChange=(e)=>{\r\n    this.setState({pendingGuest :e.target.value})\r\n  }\r\n\r\n  handleAddGuest=(event)=>{\r\n    event.preventDefault();\r\n    const id=this.newId();\r\n    this.setState({\r\n      guests:[\r\n        {\r\n        name:this.state.pendingGuest,\r\n        id:id,\r\n        isConfirmed:false,\r\n        isEdit:false\r\n      },\r\n      ...this.state.guests\r\n    ],\r\n    pendingGuest:''\r\n    })\r\n  }\r\n  handleRemoveGuest=(id)=>{\r\n    {/* This Methd is when id is not given to obejcts*/}\r\n    // this.setState({\r\n    //   guests:[\r\n    //     ...this.state.guests.slice(0, id),\r\n    //     ...this.state.guests.slice(id+1)\r\n    //   ]\r\n    // })\r\n\r\n    {/* When Id is given to Objects then this method will work */}\r\n\r\n    this.setState({guests:this.state.guests.filter(guest=> id !== guest.id)})\r\n  }\r\n\r\n  getTotalInvited=()=>{\r\n    return this.state.guests.length;\r\n  }\r\n\r\n  getAttendingGuests=()=>{\r\n    //This Method is also good but we do with treehouse project\r\n    // const isConfirmed=this.state.guests.filter((s)=>s.isConfirmed===true).length\r\n    // return isConfirmed\r\n\r\n    return this.state.guests.reduce((total, guest)=>guest.isConfirmed ? total+1 :total, 0)\r\n  }\r\n  getUnConfirmedGuests=()=>{\r\n    const isNotconfirmed=this.state.guests.length\r\n    return this.getTotalInvited() - this.getAttendingGuests()\r\n  }\r\n    render(){\r\n        return ( \r\n        <>\r\n           <div className=\"App\">\r\n      <header>\r\n        <h1>RSVP</h1>\r\n        <p>A Treehouse App</p>\r\n        <form onSubmit={this.handleAddGuest}>\r\n            <input type=\"text\" value={this.state.pendingGuest} placeholder=\"Invite Someone\" onChange={this.handleChange}/>\r\n            <button type=\"submit\" name=\"submit\" value=\"submit\">Submit</button>\r\n        </form>\r\n      </header>\r\n      <div className=\"main\">\r\n        <div>\r\n          <h2>Invitees</h2>\r\n          <label>\r\n            <input type=\"checkbox\" checked={this.state.isFilterd} onChange={this.toggleFilter}/> Hide those who haven't responded\r\n          </label>\r\n        </div>\r\n        <Counter totalGuests={this.getTotalInvited} Confirmed={this.getAttendingGuests} unConfirmed={this.getUnConfirmedGuests}/>\r\n        <GuestList guests={this.state.guests} isFilterd={this.state.isFilterd} PendingGuest={this.state.pendingGuest} toggleConfirmationAt={this.toggleConfirmationAt} toggleEditAt={this.toggleEditAt} setNameAt={this.setNameAt} removeGuest={this.handleRemoveGuest}/>\r\n      </div>\r\n    </div>\r\n        </>\r\n     );\r\n    }\r\n    \r\n}\r\n \r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './Components/App/App';\r\nReactDOM.render(<App/>,document.getElementById('root'))"],"sourceRoot":""}